#!/usr/bin/env python

# Copyright (c) 2020 Remi Salmon

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import re
import os
import sys
import json

from argparse import ArgumentParser
from urllib.request import Request, urlopen
from urllib.error import URLError

def dl(url: str) -> bytes:
    """Returns bytes object from url"""

    req = Request(url, headers = {'User-Agent':'Mozilla/5.0'})

    try:
        with urlopen(req) as response:
            data = response.read()

    except URLError as e:
        e = '{} {}'.format(e.code, e.reason) if hasattr(e, 'code') else e.reason

        raise Exception(e)

    return data

def main() -> None:
    parser = ArgumentParser(description='Download images and videos from an Instagram post')

    parser.add_argument('url', help='Instagram post url')
    parser.add_argument('-q', '--quiet', action='store_true', help='silence output')
    parser.add_argument('-d', '--debug', action='store_true', help='save JSON data for debugging')
    parser.add_argument('-p', '--path', default=os.getcwd(), help='download path (default: current dir)')

    args = parser.parse_args()

    if not re.fullmatch('https?://www.instagram.com/p/[\w-]+/?', args.url, flags=re.A):
        exit('ERROR: {} not an Instagram post url'.format(args.url))

    try:
        os.makedirs(args.path, exist_ok=True)

    except:
        sys.exit('ERROR: failed to create {}'.format(args.path))

    if args.quiet:
        sys.stdout = sys.stderr = open(os.devnull, 'w')

    print('Downloading {}'.format(args.url))

    file_path = os.path.abspath(args.path)

    file_id = args.url.rstrip('/').split('/')[-1]

    try:
        data = dl(args.url)

    except Exception as e:
        sys.exit('ERROR: failed to download data ({})'.format(e))

    html_lines = data.decode().splitlines()

    for html_line in html_lines:
        if '_sharedData = ' in html_line:
            json_data = json.loads(html_line.split('_sharedData = ')[1][:-10])

    if 'json_data' not in locals():
        exit('ERROR: no image or video found')

    if args.debug:
        file_name = '{}/{}.json'.format(file_path, file_id)

        with open(file_name, 'w') as f:
            json.dump(json_data, f)

        print('Saved {}'.format(file_name))

    json_data = json_data['entry_data']['PostPage'][0]['graphql']['shortcode_media']

    json_content = []

    if 'edge_sidecar_to_children' in json_data:
        for e in json_data['edge_sidecar_to_children']['edges']:
            json_content.append(e['node'])

    else:
        json_content.append(json_data)

    for i, c in enumerate(json_content):
        file_url = c['video_url'] if c['is_video'] else c['display_url']
        file_ext = 'mp4' if c['is_video'] else 'jpg'
        file_num = str(-(i+1)) if len(json_content) > 1 else ''

        file_name = '{}/{}{}.{}'.format(file_path, file_id, file_num, file_ext)

        try:
            data = dl(file_url)

        except:
            sys.exit('ERROR: failed to download data ({})'.format(e))

        with open(file_name, 'wb') as f:
            f.write(data)

        print('Saved {}'.format(file_name))

    return

if __name__ == '__main__':
    main()
